services:
  traefik:
    build:
      context: ./docker/traefik
      args:
        BASE_DOMAIN: ${BASE_DOMAIN}
        USE_SSL: ${USE_SSL}
        PORT: ${PORT}
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/c/data/docker/greep/traefik/acmeStaging.json:/etc/traefik/acmeStaging.json"
      - "/c/data/docker/greep/traefik/acmeProduction.json:/etc/traefik/acmeProduction.json"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  api:
    build:
      context: ./services/api
      target: production
    hostname: api
    restart: always
    stop_grace_period: 60s
    depends_on:
      - mongodb
      - redis
      - kafka
      - debezium
    volumes:
      - '/c/data/docker/greep/files/api/:/app/public/'
    command: 'sh ./wait-for-it.sh redis:6379 mongodb:27017 kafka:9092 debezium:8083 -- node lib/index.js'

  mongodb:
    image: 'mongo:7.0.7'
    hostname: mongodb
    volumes:
      - '/c/data/docker/greep/mongo/db:/data/db'
      - '/c/data/docker/greep/mongo/configdb:/data/configdb'
    restart: always
    command: '--quiet --bind_ip_all --replSet rs0'

  kafka:
    image: bitnami/kafka:3.7.0
    hostname: kafka
    restart: always
    volumes:
      - '/c/data/docker/greep/kafka/data:/bitnami/kafka'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1

  debezium:
    image: debezium/connect:2.6
    environment:
      BOOTSTRAP_SERVERS: ${KAFKA_URIS}
      GROUP_ID: greep
      CONFIG_STORAGE_TOPIC: debezium.connect.configs
      OFFSET_STORAGE_TOPIC: debezium.connect.offsets
      STATUS_STORAGE_TOPIC: debezium.connect.status
    depends_on:
      - kafka

  redis:
    image: 'redis:7.2.4-alpine'
    hostname: redis
    restart: always

  rsinit:
    build:
      context: ./docker/mongo
    hostname: rsinit
    depends_on:
      - mongodb
    restart: on-failure
    entrypoint: 'bash ./rs.sh'